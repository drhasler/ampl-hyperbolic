param n integer, > 0;
set V := 0..n-1;
set E within {V,V};
var x{V};
var y{V};
##
data graph4.dat;
option solver snopt;
option display_precision 16;

# param e := 2.71828182846;
param eps := 1e-9;

# distances
var n2 {i in V} = x[i]^2 + y[i]^2; # norm^2
var d2 {(i,j) in {V,V}} = (x[i]-x[j])^2 + (y[i]-y[j])^2; # norm^2
var d3 {(i,j) in {V,V}} = 2.0 * d2[i,j] / (1.0 - n2[i]) / (1.0 - n2[j]); # intermediate
# var d4 {(i,j) in {V,V}} = acosh(d3[i,j] + 1); # acosh not supported
var d4 {(i,j) in {V,V}} = log(d3[i,j] + 1.0 + sqrt(d3[i,j]^2 + 2.0 * d3[i,j])); # poincar√© dist

# constraints
inside {i in V}: n2[i] <= 1.0 - eps;

minimize obj:
    sum{i in V} n2[i] * 0.001 + # keep things centered
    sum{(i,j) in E} d4[i,j]^2 + # neighbors distance
    sum{(i,j) in {V,V}: i < j} 0.01/( eps + d4[i,j] ); # repulsion

var best_x{V};
var best_y{V};
var best_obj := 1e100;

for {k in 1..3} { # multistart
    for {i in V} {
        let x[i] := Uniform(-0.5, 0.5);
        let y[i] := Uniform(-0.5, 0.5);
    }
    solve;
    if obj < best_obj then {
        let best_obj := obj;
        for {i in V} {
            let best_x[i] := x[i];
            let best_y[i] := y[i];
        }
    };;
}

printf "[";
for {i in V} {
    printf "(%f,%f),", best_x[i],best_y[i];
}
printf "]\n";
