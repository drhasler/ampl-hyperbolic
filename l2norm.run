param n integer, > 0;
set V := 0..n-1;
set E within {V,V};
var x{V}, >= -1, <= 1; # baron prefers bounded vars
var y{V}, >= -1, <= 1;
##
data simpletree.dat;
option solver baron;
option display_precision 16;

# param e := 2.71828182846;
param eps := 1e-9;

# distances
var n2 {i in V} = x[i]^2 + y[i]^2; # norm^2
var d2 {(i,j) in {V,V}} = (x[i]-x[j])^2 + (y[i]-y[j])^2; # norm^2
var d3 {(i,j) in {V,V}} = 2.0 * d2[i,j] / (1.0 - n2[i]) / (1.0 - n2[j]); # intermediate
# var d4 {(i,j) in {V,V}} = acosh(d3[i,j] + 1); # acosh not supported
var d4 {(i,j) in {V,V}} = log(d3[i,j] + 1.0 + sqrt(d3[i,j]^2 + 2.0 * d3[i,j])); # poincarÃ© dist

# constraints
inside {i in V}: n2[i] <= 1.0 - eps;

minimize obj:
    sum{i in V} n2[i] * 0.001 + # keep things centered
    sum{(i,j) in E} d2[i,j] + # neighbors distance
    sum{(i,j) in {V,V}: i < j} 0.0001/( eps + sqrt(d2[i,j]) ); # repulsion
solve;

printf "[";
for {i in V} {
    printf "(%f,%f),", x[i],y[i];
}
printf "]\n";
